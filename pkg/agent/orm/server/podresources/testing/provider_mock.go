/*
Copyright 2022 The Katalyst Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/kubelet/pkg/apis/podresources/v1"
)

// MockPodsProvider is a mock of PodsProvider interface.
type MockPodsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPodsProviderMockRecorder
}

// MockPodsProviderMockRecorder is the mock recorder for MockPodsProvider.
type MockPodsProviderMockRecorder struct {
	mock *MockPodsProvider
}

// NewMockPodsProvider creates a new mock instance.
func NewMockPodsProvider(ctrl *gomock.Controller) *MockPodsProvider {
	mock := &MockPodsProvider{ctrl: ctrl}
	mock.recorder = &MockPodsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodsProvider) EXPECT() *MockPodsProviderMockRecorder {
	return m.recorder
}

// GetPods mocks base method.
func (m *MockPodsProvider) GetPods() []*v1.Pod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods")
	ret0, _ := ret[0].([]*v1.Pod)
	return ret0
}

// GetPods indicates an expected call of GetPods.
func (mr *MockPodsProviderMockRecorder) GetPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockPodsProvider)(nil).GetPods))
}

// MockResourcesProvider is a mock of ResourcesProvider interface.
type MockResourcesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesProviderMockRecorder
}

// MockResourcesProviderMockRecorder is the mock recorder for MockResourcesProvider.
type MockResourcesProviderMockRecorder struct {
	mock *MockResourcesProvider
}

// NewMockResourcesProvider creates a new mock instance.
func NewMockResourcesProvider(ctrl *gomock.Controller) *MockResourcesProvider {
	mock := &MockResourcesProvider{ctrl: ctrl}
	mock.recorder = &MockResourcesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesProvider) EXPECT() *MockResourcesProviderMockRecorder {
	return m.recorder
}

// GetTopologyAwareAllocatableResources mocks base method.
func (m *MockResourcesProvider) GetTopologyAwareAllocatableResources() []*v10.AllocatableTopologyAwareResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyAwareAllocatableResources")
	ret0, _ := ret[0].([]*v10.AllocatableTopologyAwareResource)
	return ret0
}

// GetTopologyAwareAllocatableResources indicates an expected call of GetTopologyAwareAllocatableResources.
func (mr *MockResourcesProviderMockRecorder) GetTopologyAwareAllocatableResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyAwareAllocatableResources", reflect.TypeOf((*MockResourcesProvider)(nil).GetTopologyAwareAllocatableResources))
}

// GetTopologyAwareResources mocks base method.
func (m *MockResourcesProvider) GetTopologyAwareResources(pod *v1.Pod, container *v1.Container) []*v10.TopologyAwareResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyAwareResources", pod, container)
	ret0, _ := ret[0].([]*v10.TopologyAwareResource)
	return ret0
}

// GetTopologyAwareResources indicates an expected call of GetTopologyAwareResources.
func (mr *MockResourcesProviderMockRecorder) GetTopologyAwareResources(pod, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyAwareResources", reflect.TypeOf((*MockResourcesProvider)(nil).GetTopologyAwareResources), pod, container)
}

// UpdateAllocatedResources mocks base method.
func (m *MockResourcesProvider) UpdateAllocatedResources() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateAllocatedResources")
}

// UpdateAllocatedResources indicates an expected call of UpdateAllocatedResources.
func (mr *MockResourcesProviderMockRecorder) UpdateAllocatedResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllocatedResources", reflect.TypeOf((*MockResourcesProvider)(nil).UpdateAllocatedResources))
}

// MockDevicesProvider is a mock of DevicesProvider interface.
type MockDevicesProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesProviderMockRecorder
}

// MockDevicesProviderMockRecorder is the mock recorder for MockDevicesProvider.
type MockDevicesProviderMockRecorder struct {
	mock *MockDevicesProvider
}

// NewMockDevicesProvider creates a new mock instance.
func NewMockDevicesProvider(ctrl *gomock.Controller) *MockDevicesProvider {
	mock := &MockDevicesProvider{ctrl: ctrl}
	mock.recorder = &MockDevicesProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicesProvider) EXPECT() *MockDevicesProviderMockRecorder {
	return m.recorder
}

// GetAllocatableDevices mocks base method.
func (m *MockDevicesProvider) GetAllocatableDevices() []*v10.ContainerDevices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocatableDevices")
	ret0, _ := ret[0].([]*v10.ContainerDevices)
	return ret0
}

// GetAllocatableDevices indicates an expected call of GetAllocatableDevices.
func (mr *MockDevicesProviderMockRecorder) GetAllocatableDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocatableDevices", reflect.TypeOf((*MockDevicesProvider)(nil).GetAllocatableDevices))
}

// GetDevices mocks base method.
func (m *MockDevicesProvider) GetDevices() []*v10.PodResources {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevices")
	ret0, _ := ret[0].([]*v10.PodResources)
	return ret0
}

// GetDevices indicates an expected call of GetDevices.
func (mr *MockDevicesProviderMockRecorder) GetDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockDevicesProvider)(nil).GetDevices))
}
